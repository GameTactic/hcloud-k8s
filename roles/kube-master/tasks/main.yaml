---
- name: Install the package "python-pip"
  apt:
    name:
      - python-pip
      - python-setuptools

- name: Install the python packages for k8s ansible module
  pip:
    name:
      - wheel
      - openshift

- name: Load Kubernetes Images
  shell: kubeadm config images pull

- name: Init Kubeadm - Kubernetes Master
  shell: kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-cert-extra-sans=10.0.1.2

- name: Create Kube-Config Folder
  file:
    path: /root/.kube
    state: directory

- name: Copy Kube-Config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes

- name: Create a Hetzner Secret object
  shell: kubectl -n kube-system create secret generic hcloud --from-literal=network=kubernetes --from-literal=token="{{ hetzner_token }}"

- name: Create Directory K8s yaml files
  file:
    path: /tmp/k8s-install
    state: directory

- name: Copy yaml cloud-controller-manager for Hetzner Cloud
  copy:
    src: "{{ playbook_dir }}/roles/kube-master/files/hcloud-controller.yaml"
    dest: /tmp/k8s-install/hcloud-controller.yaml

- name: Deploy the Hetzner Cloud controller manager into the cluster
  k8s:
    state: present
    src: /tmp/k8s-install/hcloud-controller.yaml

- name: Copy yaml Cilium Network Plugin
  copy:
    src: "{{ playbook_dir }}/roles/kube-master/files/cilium.yaml"
    dest: /tmp/k8s-install/cilium.yaml

- name: Deploy the Cilium Network Plugin into the cluster
  k8s:
    state: present
    src: /tmp/k8s-install/cilium.yaml

- name: Taint to unitilazed nodes cilium
  shell: kubectl -n kube-system patch daemonset cilium --type json -p '[{"op":"add","path":"/spec/template/spec/tolerations/-","value":{"key":"node.cloudprovider.kubernetes.io/uninitialized","value":"true","effect":"NoSchedule"}}]'

- name: Taint to unitilazed nodes coredns
  shell: kubectl -n kube-system patch deployment coredns --type json -p '[{"op":"add","path":"/spec/template/spec/tolerations/-","value":{"key":"node.cloudprovider.kubernetes.io/uninitialized","value":"true","effect":"NoSchedule"}}]'

- name: Create a CSI Hetzner Secret object
  shell: kubectl -n kube-system create secret generic hcloud-csi --from-literal=network=kubernetes --from-literal=token="{{ hetzner_token }}"

- name: Copy yaml CSI Driver
  copy:
    src: "{{ playbook_dir }}/roles/kube-master/files/csidriver.yaml"
    dest: /tmp/k8s-install/csidriver.yaml

- name: Deploy CSI Driver
  k8s:
    state: present
    src: /tmp/k8s-install/csidriver.yaml

- name: Copy yaml CSI Node Info
  copy:
    src: "{{ playbook_dir }}/roles/kube-master/files/csinodeinfo.yaml"
    dest: /tmp/k8s-install/csinodeinfo.yaml

- name: Deploy CSI Node Info
  k8s:
    state: present
    src: /tmp/k8s-install/csinodeinfo.yaml

- name: Copy yaml HCloud CSI
  copy:
    src: "{{ playbook_dir }}/roles/kube-master/files/hcloud-csi.yaml"
    dest: /tmp/k8s-install/hcloud-csi.yaml

- name: Deploy HCloud CSI
  k8s:
    state: present
    src: /tmp/k8s-install/hcloud-csi.yaml

- name: Create Join Command for the nodes
  shell: kubeadm token create --print-join-command
  register: join

- name: Copy Kube-Config
  slurp:
    src: /etc/kubernetes/admin.conf
  register: kubeconf

- name: Save Join to file
  local_action: copy content="{{ join.stdout }}" dest="/tmp/join.sh"
  vars:
     ansible_become: no

- name: Save kubeconf to local temp
  local_action: copy content="{{ kubeconf['content'] | b64decode }}" dest="{{ local_kube_context_path }}/config"
  vars:
     ansible_become: no